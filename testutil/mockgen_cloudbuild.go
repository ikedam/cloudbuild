// Code generated by MockGen. DO NOT EDIT.
// Source: /go/pkg/mod/google.golang.org/genproto@v0.0.0-20191216164720-4f79533eabd1/googleapis/devtools/cloudbuild/v1/cloudbuild.pb.go

// Package testutil is a generated GoMock package.
package testutil

import (
	command_line_arguments "command-line-arguments"
	context "context"
	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	longrunning "google.golang.org/genproto/googleapis/longrunning"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockisRepoSource_Revision is a mock of isRepoSource_Revision interface
type MockisRepoSource_Revision struct {
	ctrl     *gomock.Controller
	recorder *MockisRepoSource_RevisionMockRecorder
}

// MockisRepoSource_RevisionMockRecorder is the mock recorder for MockisRepoSource_Revision
type MockisRepoSource_RevisionMockRecorder struct {
	mock *MockisRepoSource_Revision
}

// NewMockisRepoSource_Revision creates a new mock instance
func NewMockisRepoSource_Revision(ctrl *gomock.Controller) *MockisRepoSource_Revision {
	mock := &MockisRepoSource_Revision{ctrl: ctrl}
	mock.recorder = &MockisRepoSource_RevisionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisRepoSource_Revision) EXPECT() *MockisRepoSource_RevisionMockRecorder {
	return m.recorder
}

// isRepoSource_Revision mocks base method
func (m *MockisRepoSource_Revision) isRepoSource_Revision() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isRepoSource_Revision")
}

// isRepoSource_Revision indicates an expected call of isRepoSource_Revision
func (mr *MockisRepoSource_RevisionMockRecorder) isRepoSource_Revision() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isRepoSource_Revision", reflect.TypeOf((*MockisRepoSource_Revision)(nil).isRepoSource_Revision))
}

// MockisSource_Source is a mock of isSource_Source interface
type MockisSource_Source struct {
	ctrl     *gomock.Controller
	recorder *MockisSource_SourceMockRecorder
}

// MockisSource_SourceMockRecorder is the mock recorder for MockisSource_Source
type MockisSource_SourceMockRecorder struct {
	mock *MockisSource_Source
}

// NewMockisSource_Source creates a new mock instance
func NewMockisSource_Source(ctrl *gomock.Controller) *MockisSource_Source {
	mock := &MockisSource_Source{ctrl: ctrl}
	mock.recorder = &MockisSource_SourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisSource_Source) EXPECT() *MockisSource_SourceMockRecorder {
	return m.recorder
}

// isSource_Source mocks base method
func (m *MockisSource_Source) isSource_Source() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isSource_Source")
}

// isSource_Source indicates an expected call of isSource_Source
func (mr *MockisSource_SourceMockRecorder) isSource_Source() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isSource_Source", reflect.TypeOf((*MockisSource_Source)(nil).isSource_Source))
}

// MockisBuildTrigger_BuildTemplate is a mock of isBuildTrigger_BuildTemplate interface
type MockisBuildTrigger_BuildTemplate struct {
	ctrl     *gomock.Controller
	recorder *MockisBuildTrigger_BuildTemplateMockRecorder
}

// MockisBuildTrigger_BuildTemplateMockRecorder is the mock recorder for MockisBuildTrigger_BuildTemplate
type MockisBuildTrigger_BuildTemplateMockRecorder struct {
	mock *MockisBuildTrigger_BuildTemplate
}

// NewMockisBuildTrigger_BuildTemplate creates a new mock instance
func NewMockisBuildTrigger_BuildTemplate(ctrl *gomock.Controller) *MockisBuildTrigger_BuildTemplate {
	mock := &MockisBuildTrigger_BuildTemplate{ctrl: ctrl}
	mock.recorder = &MockisBuildTrigger_BuildTemplateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisBuildTrigger_BuildTemplate) EXPECT() *MockisBuildTrigger_BuildTemplateMockRecorder {
	return m.recorder
}

// isBuildTrigger_BuildTemplate mocks base method
func (m *MockisBuildTrigger_BuildTemplate) isBuildTrigger_BuildTemplate() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isBuildTrigger_BuildTemplate")
}

// isBuildTrigger_BuildTemplate indicates an expected call of isBuildTrigger_BuildTemplate
func (mr *MockisBuildTrigger_BuildTemplateMockRecorder) isBuildTrigger_BuildTemplate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isBuildTrigger_BuildTemplate", reflect.TypeOf((*MockisBuildTrigger_BuildTemplate)(nil).isBuildTrigger_BuildTemplate))
}

// MockisGitHubEventsConfig_Event is a mock of isGitHubEventsConfig_Event interface
type MockisGitHubEventsConfig_Event struct {
	ctrl     *gomock.Controller
	recorder *MockisGitHubEventsConfig_EventMockRecorder
}

// MockisGitHubEventsConfig_EventMockRecorder is the mock recorder for MockisGitHubEventsConfig_Event
type MockisGitHubEventsConfig_EventMockRecorder struct {
	mock *MockisGitHubEventsConfig_Event
}

// NewMockisGitHubEventsConfig_Event creates a new mock instance
func NewMockisGitHubEventsConfig_Event(ctrl *gomock.Controller) *MockisGitHubEventsConfig_Event {
	mock := &MockisGitHubEventsConfig_Event{ctrl: ctrl}
	mock.recorder = &MockisGitHubEventsConfig_EventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisGitHubEventsConfig_Event) EXPECT() *MockisGitHubEventsConfig_EventMockRecorder {
	return m.recorder
}

// isGitHubEventsConfig_Event mocks base method
func (m *MockisGitHubEventsConfig_Event) isGitHubEventsConfig_Event() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isGitHubEventsConfig_Event")
}

// isGitHubEventsConfig_Event indicates an expected call of isGitHubEventsConfig_Event
func (mr *MockisGitHubEventsConfig_EventMockRecorder) isGitHubEventsConfig_Event() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isGitHubEventsConfig_Event", reflect.TypeOf((*MockisGitHubEventsConfig_Event)(nil).isGitHubEventsConfig_Event))
}

// MockisPullRequestFilter_GitRef is a mock of isPullRequestFilter_GitRef interface
type MockisPullRequestFilter_GitRef struct {
	ctrl     *gomock.Controller
	recorder *MockisPullRequestFilter_GitRefMockRecorder
}

// MockisPullRequestFilter_GitRefMockRecorder is the mock recorder for MockisPullRequestFilter_GitRef
type MockisPullRequestFilter_GitRefMockRecorder struct {
	mock *MockisPullRequestFilter_GitRef
}

// NewMockisPullRequestFilter_GitRef creates a new mock instance
func NewMockisPullRequestFilter_GitRef(ctrl *gomock.Controller) *MockisPullRequestFilter_GitRef {
	mock := &MockisPullRequestFilter_GitRef{ctrl: ctrl}
	mock.recorder = &MockisPullRequestFilter_GitRefMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisPullRequestFilter_GitRef) EXPECT() *MockisPullRequestFilter_GitRefMockRecorder {
	return m.recorder
}

// isPullRequestFilter_GitRef mocks base method
func (m *MockisPullRequestFilter_GitRef) isPullRequestFilter_GitRef() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isPullRequestFilter_GitRef")
}

// isPullRequestFilter_GitRef indicates an expected call of isPullRequestFilter_GitRef
func (mr *MockisPullRequestFilter_GitRefMockRecorder) isPullRequestFilter_GitRef() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isPullRequestFilter_GitRef", reflect.TypeOf((*MockisPullRequestFilter_GitRef)(nil).isPullRequestFilter_GitRef))
}

// MockisPushFilter_GitRef is a mock of isPushFilter_GitRef interface
type MockisPushFilter_GitRef struct {
	ctrl     *gomock.Controller
	recorder *MockisPushFilter_GitRefMockRecorder
}

// MockisPushFilter_GitRefMockRecorder is the mock recorder for MockisPushFilter_GitRef
type MockisPushFilter_GitRefMockRecorder struct {
	mock *MockisPushFilter_GitRef
}

// NewMockisPushFilter_GitRef creates a new mock instance
func NewMockisPushFilter_GitRef(ctrl *gomock.Controller) *MockisPushFilter_GitRef {
	mock := &MockisPushFilter_GitRef{ctrl: ctrl}
	mock.recorder = &MockisPushFilter_GitRefMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisPushFilter_GitRef) EXPECT() *MockisPushFilter_GitRefMockRecorder {
	return m.recorder
}

// isPushFilter_GitRef mocks base method
func (m *MockisPushFilter_GitRef) isPushFilter_GitRef() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isPushFilter_GitRef")
}

// isPushFilter_GitRef indicates an expected call of isPushFilter_GitRef
func (mr *MockisPushFilter_GitRefMockRecorder) isPushFilter_GitRef() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isPushFilter_GitRef", reflect.TypeOf((*MockisPushFilter_GitRef)(nil).isPushFilter_GitRef))
}

// MockCloudBuildClient is a mock of CloudBuildClient interface
type MockCloudBuildClient struct {
	ctrl     *gomock.Controller
	recorder *MockCloudBuildClientMockRecorder
}

// MockCloudBuildClientMockRecorder is the mock recorder for MockCloudBuildClient
type MockCloudBuildClientMockRecorder struct {
	mock *MockCloudBuildClient
}

// NewMockCloudBuildClient creates a new mock instance
func NewMockCloudBuildClient(ctrl *gomock.Controller) *MockCloudBuildClient {
	mock := &MockCloudBuildClient{ctrl: ctrl}
	mock.recorder = &MockCloudBuildClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCloudBuildClient) EXPECT() *MockCloudBuildClientMockRecorder {
	return m.recorder
}

// CreateBuild mocks base method
func (m *MockCloudBuildClient) CreateBuild(ctx context.Context, in *command_line_arguments.CreateBuildRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBuild", varargs...)
	ret0, _ := ret[0].(*longrunning.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBuild indicates an expected call of CreateBuild
func (mr *MockCloudBuildClientMockRecorder) CreateBuild(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBuild", reflect.TypeOf((*MockCloudBuildClient)(nil).CreateBuild), varargs...)
}

// GetBuild mocks base method
func (m *MockCloudBuildClient) GetBuild(ctx context.Context, in *command_line_arguments.GetBuildRequest, opts ...grpc.CallOption) (*command_line_arguments.Build, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBuild", varargs...)
	ret0, _ := ret[0].(*command_line_arguments.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuild indicates an expected call of GetBuild
func (mr *MockCloudBuildClientMockRecorder) GetBuild(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuild", reflect.TypeOf((*MockCloudBuildClient)(nil).GetBuild), varargs...)
}

// ListBuilds mocks base method
func (m *MockCloudBuildClient) ListBuilds(ctx context.Context, in *command_line_arguments.ListBuildsRequest, opts ...grpc.CallOption) (*command_line_arguments.ListBuildsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBuilds", varargs...)
	ret0, _ := ret[0].(*command_line_arguments.ListBuildsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBuilds indicates an expected call of ListBuilds
func (mr *MockCloudBuildClientMockRecorder) ListBuilds(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBuilds", reflect.TypeOf((*MockCloudBuildClient)(nil).ListBuilds), varargs...)
}

// CancelBuild mocks base method
func (m *MockCloudBuildClient) CancelBuild(ctx context.Context, in *command_line_arguments.CancelBuildRequest, opts ...grpc.CallOption) (*command_line_arguments.Build, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelBuild", varargs...)
	ret0, _ := ret[0].(*command_line_arguments.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelBuild indicates an expected call of CancelBuild
func (mr *MockCloudBuildClientMockRecorder) CancelBuild(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelBuild", reflect.TypeOf((*MockCloudBuildClient)(nil).CancelBuild), varargs...)
}

// RetryBuild mocks base method
func (m *MockCloudBuildClient) RetryBuild(ctx context.Context, in *command_line_arguments.RetryBuildRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetryBuild", varargs...)
	ret0, _ := ret[0].(*longrunning.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetryBuild indicates an expected call of RetryBuild
func (mr *MockCloudBuildClientMockRecorder) RetryBuild(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetryBuild", reflect.TypeOf((*MockCloudBuildClient)(nil).RetryBuild), varargs...)
}

// CreateBuildTrigger mocks base method
func (m *MockCloudBuildClient) CreateBuildTrigger(ctx context.Context, in *command_line_arguments.CreateBuildTriggerRequest, opts ...grpc.CallOption) (*command_line_arguments.BuildTrigger, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBuildTrigger", varargs...)
	ret0, _ := ret[0].(*command_line_arguments.BuildTrigger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBuildTrigger indicates an expected call of CreateBuildTrigger
func (mr *MockCloudBuildClientMockRecorder) CreateBuildTrigger(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBuildTrigger", reflect.TypeOf((*MockCloudBuildClient)(nil).CreateBuildTrigger), varargs...)
}

// GetBuildTrigger mocks base method
func (m *MockCloudBuildClient) GetBuildTrigger(ctx context.Context, in *command_line_arguments.GetBuildTriggerRequest, opts ...grpc.CallOption) (*command_line_arguments.BuildTrigger, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBuildTrigger", varargs...)
	ret0, _ := ret[0].(*command_line_arguments.BuildTrigger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuildTrigger indicates an expected call of GetBuildTrigger
func (mr *MockCloudBuildClientMockRecorder) GetBuildTrigger(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuildTrigger", reflect.TypeOf((*MockCloudBuildClient)(nil).GetBuildTrigger), varargs...)
}

// ListBuildTriggers mocks base method
func (m *MockCloudBuildClient) ListBuildTriggers(ctx context.Context, in *command_line_arguments.ListBuildTriggersRequest, opts ...grpc.CallOption) (*command_line_arguments.ListBuildTriggersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBuildTriggers", varargs...)
	ret0, _ := ret[0].(*command_line_arguments.ListBuildTriggersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBuildTriggers indicates an expected call of ListBuildTriggers
func (mr *MockCloudBuildClientMockRecorder) ListBuildTriggers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBuildTriggers", reflect.TypeOf((*MockCloudBuildClient)(nil).ListBuildTriggers), varargs...)
}

// DeleteBuildTrigger mocks base method
func (m *MockCloudBuildClient) DeleteBuildTrigger(ctx context.Context, in *command_line_arguments.DeleteBuildTriggerRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBuildTrigger", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBuildTrigger indicates an expected call of DeleteBuildTrigger
func (mr *MockCloudBuildClientMockRecorder) DeleteBuildTrigger(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBuildTrigger", reflect.TypeOf((*MockCloudBuildClient)(nil).DeleteBuildTrigger), varargs...)
}

// UpdateBuildTrigger mocks base method
func (m *MockCloudBuildClient) UpdateBuildTrigger(ctx context.Context, in *command_line_arguments.UpdateBuildTriggerRequest, opts ...grpc.CallOption) (*command_line_arguments.BuildTrigger, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBuildTrigger", varargs...)
	ret0, _ := ret[0].(*command_line_arguments.BuildTrigger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBuildTrigger indicates an expected call of UpdateBuildTrigger
func (mr *MockCloudBuildClientMockRecorder) UpdateBuildTrigger(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBuildTrigger", reflect.TypeOf((*MockCloudBuildClient)(nil).UpdateBuildTrigger), varargs...)
}

// RunBuildTrigger mocks base method
func (m *MockCloudBuildClient) RunBuildTrigger(ctx context.Context, in *command_line_arguments.RunBuildTriggerRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunBuildTrigger", varargs...)
	ret0, _ := ret[0].(*longrunning.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunBuildTrigger indicates an expected call of RunBuildTrigger
func (mr *MockCloudBuildClientMockRecorder) RunBuildTrigger(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunBuildTrigger", reflect.TypeOf((*MockCloudBuildClient)(nil).RunBuildTrigger), varargs...)
}

// CreateWorkerPool mocks base method
func (m *MockCloudBuildClient) CreateWorkerPool(ctx context.Context, in *command_line_arguments.CreateWorkerPoolRequest, opts ...grpc.CallOption) (*command_line_arguments.WorkerPool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWorkerPool", varargs...)
	ret0, _ := ret[0].(*command_line_arguments.WorkerPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkerPool indicates an expected call of CreateWorkerPool
func (mr *MockCloudBuildClientMockRecorder) CreateWorkerPool(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkerPool", reflect.TypeOf((*MockCloudBuildClient)(nil).CreateWorkerPool), varargs...)
}

// GetWorkerPool mocks base method
func (m *MockCloudBuildClient) GetWorkerPool(ctx context.Context, in *command_line_arguments.GetWorkerPoolRequest, opts ...grpc.CallOption) (*command_line_arguments.WorkerPool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWorkerPool", varargs...)
	ret0, _ := ret[0].(*command_line_arguments.WorkerPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkerPool indicates an expected call of GetWorkerPool
func (mr *MockCloudBuildClientMockRecorder) GetWorkerPool(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkerPool", reflect.TypeOf((*MockCloudBuildClient)(nil).GetWorkerPool), varargs...)
}

// DeleteWorkerPool mocks base method
func (m *MockCloudBuildClient) DeleteWorkerPool(ctx context.Context, in *command_line_arguments.DeleteWorkerPoolRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWorkerPool", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkerPool indicates an expected call of DeleteWorkerPool
func (mr *MockCloudBuildClientMockRecorder) DeleteWorkerPool(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkerPool", reflect.TypeOf((*MockCloudBuildClient)(nil).DeleteWorkerPool), varargs...)
}

// UpdateWorkerPool mocks base method
func (m *MockCloudBuildClient) UpdateWorkerPool(ctx context.Context, in *command_line_arguments.UpdateWorkerPoolRequest, opts ...grpc.CallOption) (*command_line_arguments.WorkerPool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWorkerPool", varargs...)
	ret0, _ := ret[0].(*command_line_arguments.WorkerPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkerPool indicates an expected call of UpdateWorkerPool
func (mr *MockCloudBuildClientMockRecorder) UpdateWorkerPool(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkerPool", reflect.TypeOf((*MockCloudBuildClient)(nil).UpdateWorkerPool), varargs...)
}

// ListWorkerPools mocks base method
func (m *MockCloudBuildClient) ListWorkerPools(ctx context.Context, in *command_line_arguments.ListWorkerPoolsRequest, opts ...grpc.CallOption) (*command_line_arguments.ListWorkerPoolsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkerPools", varargs...)
	ret0, _ := ret[0].(*command_line_arguments.ListWorkerPoolsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkerPools indicates an expected call of ListWorkerPools
func (mr *MockCloudBuildClientMockRecorder) ListWorkerPools(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkerPools", reflect.TypeOf((*MockCloudBuildClient)(nil).ListWorkerPools), varargs...)
}

// MockCloudBuildServer is a mock of CloudBuildServer interface
type MockCloudBuildServer struct {
	ctrl     *gomock.Controller
	recorder *MockCloudBuildServerMockRecorder
}

// MockCloudBuildServerMockRecorder is the mock recorder for MockCloudBuildServer
type MockCloudBuildServerMockRecorder struct {
	mock *MockCloudBuildServer
}

// NewMockCloudBuildServer creates a new mock instance
func NewMockCloudBuildServer(ctrl *gomock.Controller) *MockCloudBuildServer {
	mock := &MockCloudBuildServer{ctrl: ctrl}
	mock.recorder = &MockCloudBuildServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCloudBuildServer) EXPECT() *MockCloudBuildServerMockRecorder {
	return m.recorder
}

// CreateBuild mocks base method
func (m *MockCloudBuildServer) CreateBuild(arg0 context.Context, arg1 *command_line_arguments.CreateBuildRequest) (*longrunning.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBuild", arg0, arg1)
	ret0, _ := ret[0].(*longrunning.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBuild indicates an expected call of CreateBuild
func (mr *MockCloudBuildServerMockRecorder) CreateBuild(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBuild", reflect.TypeOf((*MockCloudBuildServer)(nil).CreateBuild), arg0, arg1)
}

// GetBuild mocks base method
func (m *MockCloudBuildServer) GetBuild(arg0 context.Context, arg1 *command_line_arguments.GetBuildRequest) (*command_line_arguments.Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuild", arg0, arg1)
	ret0, _ := ret[0].(*command_line_arguments.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuild indicates an expected call of GetBuild
func (mr *MockCloudBuildServerMockRecorder) GetBuild(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuild", reflect.TypeOf((*MockCloudBuildServer)(nil).GetBuild), arg0, arg1)
}

// ListBuilds mocks base method
func (m *MockCloudBuildServer) ListBuilds(arg0 context.Context, arg1 *command_line_arguments.ListBuildsRequest) (*command_line_arguments.ListBuildsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBuilds", arg0, arg1)
	ret0, _ := ret[0].(*command_line_arguments.ListBuildsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBuilds indicates an expected call of ListBuilds
func (mr *MockCloudBuildServerMockRecorder) ListBuilds(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBuilds", reflect.TypeOf((*MockCloudBuildServer)(nil).ListBuilds), arg0, arg1)
}

// CancelBuild mocks base method
func (m *MockCloudBuildServer) CancelBuild(arg0 context.Context, arg1 *command_line_arguments.CancelBuildRequest) (*command_line_arguments.Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelBuild", arg0, arg1)
	ret0, _ := ret[0].(*command_line_arguments.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelBuild indicates an expected call of CancelBuild
func (mr *MockCloudBuildServerMockRecorder) CancelBuild(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelBuild", reflect.TypeOf((*MockCloudBuildServer)(nil).CancelBuild), arg0, arg1)
}

// RetryBuild mocks base method
func (m *MockCloudBuildServer) RetryBuild(arg0 context.Context, arg1 *command_line_arguments.RetryBuildRequest) (*longrunning.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetryBuild", arg0, arg1)
	ret0, _ := ret[0].(*longrunning.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetryBuild indicates an expected call of RetryBuild
func (mr *MockCloudBuildServerMockRecorder) RetryBuild(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetryBuild", reflect.TypeOf((*MockCloudBuildServer)(nil).RetryBuild), arg0, arg1)
}

// CreateBuildTrigger mocks base method
func (m *MockCloudBuildServer) CreateBuildTrigger(arg0 context.Context, arg1 *command_line_arguments.CreateBuildTriggerRequest) (*command_line_arguments.BuildTrigger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBuildTrigger", arg0, arg1)
	ret0, _ := ret[0].(*command_line_arguments.BuildTrigger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBuildTrigger indicates an expected call of CreateBuildTrigger
func (mr *MockCloudBuildServerMockRecorder) CreateBuildTrigger(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBuildTrigger", reflect.TypeOf((*MockCloudBuildServer)(nil).CreateBuildTrigger), arg0, arg1)
}

// GetBuildTrigger mocks base method
func (m *MockCloudBuildServer) GetBuildTrigger(arg0 context.Context, arg1 *command_line_arguments.GetBuildTriggerRequest) (*command_line_arguments.BuildTrigger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuildTrigger", arg0, arg1)
	ret0, _ := ret[0].(*command_line_arguments.BuildTrigger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuildTrigger indicates an expected call of GetBuildTrigger
func (mr *MockCloudBuildServerMockRecorder) GetBuildTrigger(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuildTrigger", reflect.TypeOf((*MockCloudBuildServer)(nil).GetBuildTrigger), arg0, arg1)
}

// ListBuildTriggers mocks base method
func (m *MockCloudBuildServer) ListBuildTriggers(arg0 context.Context, arg1 *command_line_arguments.ListBuildTriggersRequest) (*command_line_arguments.ListBuildTriggersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBuildTriggers", arg0, arg1)
	ret0, _ := ret[0].(*command_line_arguments.ListBuildTriggersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBuildTriggers indicates an expected call of ListBuildTriggers
func (mr *MockCloudBuildServerMockRecorder) ListBuildTriggers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBuildTriggers", reflect.TypeOf((*MockCloudBuildServer)(nil).ListBuildTriggers), arg0, arg1)
}

// DeleteBuildTrigger mocks base method
func (m *MockCloudBuildServer) DeleteBuildTrigger(arg0 context.Context, arg1 *command_line_arguments.DeleteBuildTriggerRequest) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBuildTrigger", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBuildTrigger indicates an expected call of DeleteBuildTrigger
func (mr *MockCloudBuildServerMockRecorder) DeleteBuildTrigger(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBuildTrigger", reflect.TypeOf((*MockCloudBuildServer)(nil).DeleteBuildTrigger), arg0, arg1)
}

// UpdateBuildTrigger mocks base method
func (m *MockCloudBuildServer) UpdateBuildTrigger(arg0 context.Context, arg1 *command_line_arguments.UpdateBuildTriggerRequest) (*command_line_arguments.BuildTrigger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBuildTrigger", arg0, arg1)
	ret0, _ := ret[0].(*command_line_arguments.BuildTrigger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBuildTrigger indicates an expected call of UpdateBuildTrigger
func (mr *MockCloudBuildServerMockRecorder) UpdateBuildTrigger(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBuildTrigger", reflect.TypeOf((*MockCloudBuildServer)(nil).UpdateBuildTrigger), arg0, arg1)
}

// RunBuildTrigger mocks base method
func (m *MockCloudBuildServer) RunBuildTrigger(arg0 context.Context, arg1 *command_line_arguments.RunBuildTriggerRequest) (*longrunning.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunBuildTrigger", arg0, arg1)
	ret0, _ := ret[0].(*longrunning.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunBuildTrigger indicates an expected call of RunBuildTrigger
func (mr *MockCloudBuildServerMockRecorder) RunBuildTrigger(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunBuildTrigger", reflect.TypeOf((*MockCloudBuildServer)(nil).RunBuildTrigger), arg0, arg1)
}

// CreateWorkerPool mocks base method
func (m *MockCloudBuildServer) CreateWorkerPool(arg0 context.Context, arg1 *command_line_arguments.CreateWorkerPoolRequest) (*command_line_arguments.WorkerPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkerPool", arg0, arg1)
	ret0, _ := ret[0].(*command_line_arguments.WorkerPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkerPool indicates an expected call of CreateWorkerPool
func (mr *MockCloudBuildServerMockRecorder) CreateWorkerPool(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkerPool", reflect.TypeOf((*MockCloudBuildServer)(nil).CreateWorkerPool), arg0, arg1)
}

// GetWorkerPool mocks base method
func (m *MockCloudBuildServer) GetWorkerPool(arg0 context.Context, arg1 *command_line_arguments.GetWorkerPoolRequest) (*command_line_arguments.WorkerPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkerPool", arg0, arg1)
	ret0, _ := ret[0].(*command_line_arguments.WorkerPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkerPool indicates an expected call of GetWorkerPool
func (mr *MockCloudBuildServerMockRecorder) GetWorkerPool(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkerPool", reflect.TypeOf((*MockCloudBuildServer)(nil).GetWorkerPool), arg0, arg1)
}

// DeleteWorkerPool mocks base method
func (m *MockCloudBuildServer) DeleteWorkerPool(arg0 context.Context, arg1 *command_line_arguments.DeleteWorkerPoolRequest) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkerPool", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkerPool indicates an expected call of DeleteWorkerPool
func (mr *MockCloudBuildServerMockRecorder) DeleteWorkerPool(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkerPool", reflect.TypeOf((*MockCloudBuildServer)(nil).DeleteWorkerPool), arg0, arg1)
}

// UpdateWorkerPool mocks base method
func (m *MockCloudBuildServer) UpdateWorkerPool(arg0 context.Context, arg1 *command_line_arguments.UpdateWorkerPoolRequest) (*command_line_arguments.WorkerPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkerPool", arg0, arg1)
	ret0, _ := ret[0].(*command_line_arguments.WorkerPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkerPool indicates an expected call of UpdateWorkerPool
func (mr *MockCloudBuildServerMockRecorder) UpdateWorkerPool(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkerPool", reflect.TypeOf((*MockCloudBuildServer)(nil).UpdateWorkerPool), arg0, arg1)
}

// ListWorkerPools mocks base method
func (m *MockCloudBuildServer) ListWorkerPools(arg0 context.Context, arg1 *command_line_arguments.ListWorkerPoolsRequest) (*command_line_arguments.ListWorkerPoolsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkerPools", arg0, arg1)
	ret0, _ := ret[0].(*command_line_arguments.ListWorkerPoolsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkerPools indicates an expected call of ListWorkerPools
func (mr *MockCloudBuildServerMockRecorder) ListWorkerPools(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkerPools", reflect.TypeOf((*MockCloudBuildServer)(nil).ListWorkerPools), arg0, arg1)
}
