// Code generated by MockGen. DO NOT EDIT.
// Source: google.golang.org/genproto/googleapis/devtools/cloudbuild/v1 (interfaces: CloudBuildServer)

// Package testutil is a generated GoMock package.
package testutil

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	v1 "google.golang.org/genproto/googleapis/devtools/cloudbuild/v1"
	longrunning "google.golang.org/genproto/googleapis/longrunning"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
)

// MockCloudBuildServer is a mock of CloudBuildServer interface
type MockCloudBuildServer struct {
	ctrl     *gomock.Controller
	recorder *MockCloudBuildServerMockRecorder
}

// MockCloudBuildServerMockRecorder is the mock recorder for MockCloudBuildServer
type MockCloudBuildServerMockRecorder struct {
	mock *MockCloudBuildServer
}

// NewMockCloudBuildServer creates a new mock instance
func NewMockCloudBuildServer(ctrl *gomock.Controller) *MockCloudBuildServer {
	mock := &MockCloudBuildServer{ctrl: ctrl}
	mock.recorder = &MockCloudBuildServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCloudBuildServer) EXPECT() *MockCloudBuildServerMockRecorder {
	return m.recorder
}

// CancelBuild mocks base method
func (m *MockCloudBuildServer) CancelBuild(arg0 context.Context, arg1 *v1.CancelBuildRequest) (*v1.Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelBuild", arg0, arg1)
	ret0, _ := ret[0].(*v1.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelBuild indicates an expected call of CancelBuild
func (mr *MockCloudBuildServerMockRecorder) CancelBuild(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelBuild", reflect.TypeOf((*MockCloudBuildServer)(nil).CancelBuild), arg0, arg1)
}

// CreateBuild mocks base method
func (m *MockCloudBuildServer) CreateBuild(arg0 context.Context, arg1 *v1.CreateBuildRequest) (*longrunning.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBuild", arg0, arg1)
	ret0, _ := ret[0].(*longrunning.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBuild indicates an expected call of CreateBuild
func (mr *MockCloudBuildServerMockRecorder) CreateBuild(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBuild", reflect.TypeOf((*MockCloudBuildServer)(nil).CreateBuild), arg0, arg1)
}

// CreateBuildTrigger mocks base method
func (m *MockCloudBuildServer) CreateBuildTrigger(arg0 context.Context, arg1 *v1.CreateBuildTriggerRequest) (*v1.BuildTrigger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBuildTrigger", arg0, arg1)
	ret0, _ := ret[0].(*v1.BuildTrigger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBuildTrigger indicates an expected call of CreateBuildTrigger
func (mr *MockCloudBuildServerMockRecorder) CreateBuildTrigger(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBuildTrigger", reflect.TypeOf((*MockCloudBuildServer)(nil).CreateBuildTrigger), arg0, arg1)
}

// CreateWorkerPool mocks base method
func (m *MockCloudBuildServer) CreateWorkerPool(arg0 context.Context, arg1 *v1.CreateWorkerPoolRequest) (*v1.WorkerPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkerPool", arg0, arg1)
	ret0, _ := ret[0].(*v1.WorkerPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkerPool indicates an expected call of CreateWorkerPool
func (mr *MockCloudBuildServerMockRecorder) CreateWorkerPool(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkerPool", reflect.TypeOf((*MockCloudBuildServer)(nil).CreateWorkerPool), arg0, arg1)
}

// DeleteBuildTrigger mocks base method
func (m *MockCloudBuildServer) DeleteBuildTrigger(arg0 context.Context, arg1 *v1.DeleteBuildTriggerRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBuildTrigger", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBuildTrigger indicates an expected call of DeleteBuildTrigger
func (mr *MockCloudBuildServerMockRecorder) DeleteBuildTrigger(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBuildTrigger", reflect.TypeOf((*MockCloudBuildServer)(nil).DeleteBuildTrigger), arg0, arg1)
}

// DeleteWorkerPool mocks base method
func (m *MockCloudBuildServer) DeleteWorkerPool(arg0 context.Context, arg1 *v1.DeleteWorkerPoolRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkerPool", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkerPool indicates an expected call of DeleteWorkerPool
func (mr *MockCloudBuildServerMockRecorder) DeleteWorkerPool(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkerPool", reflect.TypeOf((*MockCloudBuildServer)(nil).DeleteWorkerPool), arg0, arg1)
}

// GetBuild mocks base method
func (m *MockCloudBuildServer) GetBuild(arg0 context.Context, arg1 *v1.GetBuildRequest) (*v1.Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuild", arg0, arg1)
	ret0, _ := ret[0].(*v1.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuild indicates an expected call of GetBuild
func (mr *MockCloudBuildServerMockRecorder) GetBuild(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuild", reflect.TypeOf((*MockCloudBuildServer)(nil).GetBuild), arg0, arg1)
}

// GetBuildTrigger mocks base method
func (m *MockCloudBuildServer) GetBuildTrigger(arg0 context.Context, arg1 *v1.GetBuildTriggerRequest) (*v1.BuildTrigger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuildTrigger", arg0, arg1)
	ret0, _ := ret[0].(*v1.BuildTrigger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuildTrigger indicates an expected call of GetBuildTrigger
func (mr *MockCloudBuildServerMockRecorder) GetBuildTrigger(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuildTrigger", reflect.TypeOf((*MockCloudBuildServer)(nil).GetBuildTrigger), arg0, arg1)
}

// GetWorkerPool mocks base method
func (m *MockCloudBuildServer) GetWorkerPool(arg0 context.Context, arg1 *v1.GetWorkerPoolRequest) (*v1.WorkerPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkerPool", arg0, arg1)
	ret0, _ := ret[0].(*v1.WorkerPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkerPool indicates an expected call of GetWorkerPool
func (mr *MockCloudBuildServerMockRecorder) GetWorkerPool(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkerPool", reflect.TypeOf((*MockCloudBuildServer)(nil).GetWorkerPool), arg0, arg1)
}

// ListBuildTriggers mocks base method
func (m *MockCloudBuildServer) ListBuildTriggers(arg0 context.Context, arg1 *v1.ListBuildTriggersRequest) (*v1.ListBuildTriggersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBuildTriggers", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListBuildTriggersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBuildTriggers indicates an expected call of ListBuildTriggers
func (mr *MockCloudBuildServerMockRecorder) ListBuildTriggers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBuildTriggers", reflect.TypeOf((*MockCloudBuildServer)(nil).ListBuildTriggers), arg0, arg1)
}

// ListBuilds mocks base method
func (m *MockCloudBuildServer) ListBuilds(arg0 context.Context, arg1 *v1.ListBuildsRequest) (*v1.ListBuildsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBuilds", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListBuildsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBuilds indicates an expected call of ListBuilds
func (mr *MockCloudBuildServerMockRecorder) ListBuilds(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBuilds", reflect.TypeOf((*MockCloudBuildServer)(nil).ListBuilds), arg0, arg1)
}

// ListWorkerPools mocks base method
func (m *MockCloudBuildServer) ListWorkerPools(arg0 context.Context, arg1 *v1.ListWorkerPoolsRequest) (*v1.ListWorkerPoolsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkerPools", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListWorkerPoolsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkerPools indicates an expected call of ListWorkerPools
func (mr *MockCloudBuildServerMockRecorder) ListWorkerPools(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkerPools", reflect.TypeOf((*MockCloudBuildServer)(nil).ListWorkerPools), arg0, arg1)
}

// RetryBuild mocks base method
func (m *MockCloudBuildServer) RetryBuild(arg0 context.Context, arg1 *v1.RetryBuildRequest) (*longrunning.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetryBuild", arg0, arg1)
	ret0, _ := ret[0].(*longrunning.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetryBuild indicates an expected call of RetryBuild
func (mr *MockCloudBuildServerMockRecorder) RetryBuild(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetryBuild", reflect.TypeOf((*MockCloudBuildServer)(nil).RetryBuild), arg0, arg1)
}

// RunBuildTrigger mocks base method
func (m *MockCloudBuildServer) RunBuildTrigger(arg0 context.Context, arg1 *v1.RunBuildTriggerRequest) (*longrunning.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunBuildTrigger", arg0, arg1)
	ret0, _ := ret[0].(*longrunning.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunBuildTrigger indicates an expected call of RunBuildTrigger
func (mr *MockCloudBuildServerMockRecorder) RunBuildTrigger(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunBuildTrigger", reflect.TypeOf((*MockCloudBuildServer)(nil).RunBuildTrigger), arg0, arg1)
}

// UpdateBuildTrigger mocks base method
func (m *MockCloudBuildServer) UpdateBuildTrigger(arg0 context.Context, arg1 *v1.UpdateBuildTriggerRequest) (*v1.BuildTrigger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBuildTrigger", arg0, arg1)
	ret0, _ := ret[0].(*v1.BuildTrigger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBuildTrigger indicates an expected call of UpdateBuildTrigger
func (mr *MockCloudBuildServerMockRecorder) UpdateBuildTrigger(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBuildTrigger", reflect.TypeOf((*MockCloudBuildServer)(nil).UpdateBuildTrigger), arg0, arg1)
}

// UpdateWorkerPool mocks base method
func (m *MockCloudBuildServer) UpdateWorkerPool(arg0 context.Context, arg1 *v1.UpdateWorkerPoolRequest) (*v1.WorkerPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkerPool", arg0, arg1)
	ret0, _ := ret[0].(*v1.WorkerPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkerPool indicates an expected call of UpdateWorkerPool
func (mr *MockCloudBuildServerMockRecorder) UpdateWorkerPool(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkerPool", reflect.TypeOf((*MockCloudBuildServer)(nil).UpdateWorkerPool), arg0, arg1)
}
